# Cursor Rules for AI Chatbot Project

## Project Overview
This is a Next.js 14 AI chatbot application using the Vercel AI SDK v5 with chat persistence, markdown rendering, and OpenAI-compatible API support.

## Technology Stack
- **Framework**: Next.js 14 with App Router
- **Frontend**: React 18, TypeScript, Tailwind CSS
- **AI SDK**: Vercel AI SDK v5 (@ai-sdk/react v2.x)
- **Provider**: OpenAI-compatible APIs
- **Persistence**: Local filesystem (.chats/ directory)
- **Styling**: Tailwind CSS v3 with @tailwindcss/typography

## Coding Guidelines

### File Structure
- Use App Router structure: `app/` directory
- Components in `components/` directory
- Utilities in `lib/` directory
- Chat persistence files in `.chats/` (auto-generated, gitignored)

### AI SDK Patterns
- Use `useChat` hook from `@ai-sdk/react`
- Use `DefaultChatTransport` for API communication
- Use `sendMessage` for sending messages (not handleSubmit)
- Use `message.parts` for rendering (not message.content)
- Use `toUIMessageStreamResponse()` in API routes
- Use `convertToModelMessages()` for model compatibility

### Chat Persistence
- Each chat has unique ID generated by `generateId()`
- Messages saved to `.chats/[chatId].json`
- Use `loadChat()` and `saveChat()` from `lib/chat-store.ts`
- API receives `{ message, id }` format for persistence

### Environment Variables
- `OPENAI_API_KEY`: API key for any OpenAI-compatible provider
- `OPENAI_BASE_URL`: Base URL (default: https://api.deepseek.com/v1)

### Styling Rules
- Use Tailwind CSS utility classes

### Error Handling
- Comprehensive error logging with emojis for visual scanning
- User-friendly error messages in UI

### Logging Standards
- Backend: Essential request info, API status, errors
- Frontend: Status changes, message counts, completion tracking
- Use emojis for quick visual identification (üí¨, ‚úÖ, ‚ùå, üöÄ, etc.)
- Keep logs concise and actionable

### Component Patterns
- Use TypeScript interfaces for props
- Destructure needed values from hooks
- Handle loading states with `status` ('ready', 'streaming', 'submitted', 'error')
- Implement proper form submission with preventDefault

### API Route Patterns
- Return proper error responses with status codes

### Code Quality
- follow KISS principle
- write easy to understand and maintain code
- follow best practice of React development
- follow best practice of Nexus development

### Testing Considerations
- write unit test
- use playwright for functional testing

### Documentation
- Update readme for every feature change